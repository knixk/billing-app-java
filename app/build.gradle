plugins {
    id 'com.android.application'
}

android {
    compileSdkVersion 33
    buildToolsVersion "31.0.0"

    defaultConfig {
        applicationId "com.pos.poscontroller"
        minSdkVersion 23
        targetSdkVersion 33
        versionCode 1
        versionName "1.6"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
}

dependencies {
    implementation fileTree(include: ['*.aar'], dir: 'libs')
    //implementation project(path: ':PosLib')
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    //recycler view
    implementation "androidx.recyclerview:recyclerview:1.3.0"
    implementation "androidx.recyclerview:recyclerview-selection:1.1.0"
    testImplementation 'junit:junit:4.13.2'

    implementation 'com.google.code.gson:gson:2.8.9'

    androidTestImplementation 'androidx.test.ext:junit:1.1.4'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    implementation 'com.google.android.material:material:1.1.0'

}

apply plugin: 'jacoco'

jacoco {
    toolVersion =  "0.8.7"
}

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled(true)
        html.enabled(true)
    }
    classDirectories.from = fileTree(
            dir: 'build/intermediates/javac/debug/classes/com/pos/poslib',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/BuildConfig.*',
                       '**/Manifest*.*'])
    sourceDirectories.from = files('src/main/java')
    executionData.from = files('build/jacoco/testDebugUnitTest.exec')
    doFirst {
        files('build/intermediates/javac/debug/classes').getFiles().each { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}